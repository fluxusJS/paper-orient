.container
  h2 performer action
  div(class='main')
    h3 Device Orientation

script
 $(document).ready(function() {

  Fluxus={};

  Fluxus.deviceOrientation = {}

  if (window.DeviceOrientationEvent) {
    // Listen for the deviceorientation event and handle DeviceOrientationEvent object
    window.addEventListener('deviceorientation', console.log('devOrientHandler'), false);

  } else if (window.OrientationEvent) {
    // Listen for the MozOrientation event and handle OrientationData object
    window.addEventListener('MozOrientation', console.log('mozDevOrientHandler'), false);
  }

  if (window.DeviceMotionEvent) {
    console.log("DeviceMotionEvent supported");
  }

  if (window.DeviceOrientationEvent) {

      // Listen for the deviceorientation event and handle the raw data
      window.addEventListener('deviceorientation', function(eventData) {

      Fluxus.deviceOrientation.gamma = eventData.gamma;
      Fluxus.deviceOrientation.beta = eventData.beta;
      Fluxus.deviceOrientation.alpha = eventData.alpha;

  }, false);

  } else if (window.OrientationEvent) {
      window.addEventListener('MozOrientation', function(eventData) {
    }, false);

  } else {
    document.getElementById("doEvent").innerHTML = "Not supported on your device or browser."
  }

  ///// DeviceMotion

  if ((window.DeviceMotionEvent) || ('listenForDeviceMovement' in window)) {
    window.addEventListener('devicemotion', function(eventData){

      var acceleration = eventData.accelerationIncludingGravity;
      console.log(acceleration);

      // Display the raw acceleration data
      var rawAcceleration = "[" + Math.round(acceleration.x) + ", " + Math.round(acceleration.y) + ", " + Math.round(acceleration.z) + "]";
      
      
      // Z is the acceleration in the Z axis, and tells us if the device is facing up, or down
      var facingUp = -1;
      if (acceleration.z > 0) {
        facingUp = +1;
      }

      // Convert the value from acceleration to degress
      //   acceleration.x|y is the acceleration according to gravity, we'll assume we're on Earth and divide 
      //   by 9.81 (earth gravity) to get a percentage value, and then multiply that by 90 to convert to degrees.       
      Fluxus.deviceMotion.tiltLR = Math.round(((acceleration.x) / 9.81) * -90);
      Fluxus.deviceMotion.tiltFB = Math.round(((acceleration.y + 9.81) / 9.81) * 90 * facingUp);

    }, false);
  } else {
    console.log("DeviceMotion is not supported on your device or browser")
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////

  var socket = io.connect();
    
    // EXAMPLE - Device Orientation emmision - (looped emmission)
    setInterval(function(){
      console.log('device-orientation loop');

      socket.emit('device-orientation', {
        gamma: Fluxus.deviceOrientation.gamma, 
        beta: Fluxus.deviceOrientation.beta,
        alpha: Fluxus.deviceOrientation.alpha
      });

    }, 100);
  });

  // LISTEN FOR MESSAGES FROM THE SERVER

  socket.on('message', function (data) {
    console.dir(data);
    console.dir(JSON.parse(data));
    var json = JSON.parse(data);    

    if (json['state'] > -1) {
      console.log('state: ' + json.state);
      console.log("STATE MESSAGE");
      // fire an event
      $.deck('go', json.state);
    }
    if (json.cmd) {
      console.log('cmd: ' + json.cmd);
      console.log("CMD MESSAGE");
      // call deck.js api
      $.deck(json.cmd)
    }
    else if (json.clients) {
      console.log('clients: ' + json.clients);
      console.log("CLIENT NUMBER MESSAGE");   
      // update the DOM
      $('#viewers').text('viewers:' + json.clients);
    }
    else if (json.loc) {
      console.log('loc: ' + json.loc);
      console.log("CLIENT loc MESSAGE");  
      // update the DOM
      $('#locations').append('location: ' + json.loc +'</br>');
    }
    else if (json.fn) {
      console.log('callback fn: ' + json.fn);
      console.log("FIRING SERVER DEFINED CALLBACK");
      json.fn();
    }

    });
  //});